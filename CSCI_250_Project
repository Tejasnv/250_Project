package img;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.JTextField;
import javax.swing.JButton;

public class vor {

	private JFrame frame;
	private JTextField Desired;
	private int num1;
	private int Answer;
	private int spinnerValue;
	private JTextField Ans;
	private JTextField Direction;
        private int deflection = 5;

/**
	 * Launch the application.
 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					vor window = new vor();
					window.frame.setVisible(true);

			        new TestRotateImage();

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

/**
	 * Create the application.
 */
	public vor() {
		initialize();
 	}

private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 413, 381);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		frame.setBackground(Color.RED);
		
		Desired = new JTextField();
		Desired.setText("0");
		Desired.setHorizontalAlignment(SwingConstants.RIGHT);
		Desired.setFont(new Font("Tahoma", Font.BOLD, 30));
		Desired.setBounds(223, 61, 123, 44);
		frame.getContentPane().add(Desired);
		Desired.setColumns(10);
		
		JSpinner ActualVspinner = new JSpinner();
		ActualVspinner.setFont(new Font("Tahoma", Font.BOLD, 30));
		ActualVspinner.setModel(new SpinnerNumberModel(0, 0, 360, 1));
		ActualVspinner.setBounds(223, 178, 123, 44);
		frame.getContentPane().add(ActualVspinner);
		
		Ans = new JTextField();
		Ans.setBackground(UIManager.getColor("TextField.inactiveBackground"));
		Ans.setHorizontalAlignment(SwingConstants.CENTER);
		Ans.setFont(new Font("Tahoma", Font.BOLD, 30));
		Ans.setForeground(Color.BLACK);
		Ans.setBounds(42, 61, 114, 44);
		frame.getContentPane().add(Ans);
		Ans.setColumns(12);
		Ans.setEditable(false);
				
		Direction = new JTextField();
		Direction.setBackground(UIManager.getColor("TextField.inactiveBackground"));
		Direction.setHorizontalAlignment(SwingConstants.CENTER);
		Direction.setFont(new Font("Tahoma", Font.BOLD, 25));
		Direction.setBounds(42, 178, 114, 44);
		frame.getContentPane().add(Direction);
		Direction.setEditable(false);
		Direction.setColumns(10);
		
	JButton set = new JButton("Set");
		set.setFont(new Font("Tahoma", Font.BOLD | Font.ITALIC, 30));
		set.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try{
					num1=Integer.parseInt(Desired.getText());
	

					if(num1 <0 || num1>360)
					{
						JOptionPane.showMessageDialog(null, "Enter a Valid Radial  (In Range of 0-360)");
					}
					else{
					spinnerValue=(Integer)ActualVspinner.getValue();
					String turnDirection = null;
					if(num1 > spinnerValue)
					{
						Answer = num1-spinnerValue;
						if(Answer > 180)
						{
							Answer = 360-Answer;
							turnDirection = "Left";
						}
						else
						{
							turnDirection = "Right";
						}
					}
					else if(num1 < spinnerValue)
						{
							Answer = spinnerValue-num1;
							if(Answer > 180)
							{
								Answer = 360-Answer;
								turnDirection = "Right";
							}
							else
							{
								turnDirection = "Left";
							}
						}
					else if(num1 == spinnerValue){
						Answer = 0;
						turnDirection = "";
					}
					
						if(Answer > 5){
							deflection = 5;
						}
						else{
							deflection = Answer;
						}
						if(turnDirection == "Left"){
							deflection = deflection * -1;
						}				
						deflection = deflection +5;
			/*
			 * 				
			 */
					Ans.setText(Integer.toString(Answer));
					Direction.setText(turnDirection);
					
					EventQueue.invokeLater(new Runnable() {
				            @Override
				            public void run() {
				                try {
				                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
				                } catch (Exception ex) {
				                }
			
				                JFrame frame = new JFrame("Test");
				                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				                frame.getContentPane().add(new dial());
				                frame.pack();
				                frame.setLocationRelativeTo(null);
				                frame.setVisible(true);
				            }
				        });
					}		
				}
				catch(Exception e){
					JOptionPane.showMessageDialog(null, "Enter a Valid Number");
				}
			}
		});
		
		set.setBounds(223, 263, 123, 48);
		frame.getContentPane().add(set);
		
		JLabel lblDirection = new JLabel("Direction");
		lblDirection.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblDirection.setBounds(52, 145, 97, 33);
		frame.getContentPane().add(lblDirection);
		
		JLabel lblTurnRadian = new JLabel("Turn by Radial");
		lblTurnRadian.setBackground(UIManager.getColor("TextField.inactiveBackground"));
		lblTurnRadian.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblTurnRadian.setBounds(25, 30, 165, 32);
		frame.getContentPane().add(lblTurnRadian);
		
		JLabel lblDesiredRadial = new JLabel("Desired Radial");
		lblDesiredRadial.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblDesiredRadial.setBounds(215, 30, 155, 32);
		frame.getContentPane().add(lblDesiredRadial);
		
		JLabel lblCurrentRadial = new JLabel("Current Radial");
		lblCurrentRadial.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblCurrentRadial.setBounds(215, 145, 155, 32);
		frame.getContentPane().add(lblCurrentRadial);
	}

@SuppressWarnings("serial")
	public class dial extends JPanel {
        private BufferedImage bi = null;
        private BufferedImage bi2 = null;
        JLabel picLabel = null;
        protected int dialAngle = num1;
        protected int dialAngle2 = deflection;
        
        public dial() {
        	
            setLayout(new BorderLayout());
    		try {
    			bi = ImageIO.read(new File("C:\\\\MyPrograms\\\\workspace\\\\VOR\\\\src\\\\Images\\\\VORdiel.png"));
    			bi2 = ImageIO.read(new File("C:\\\\MyPrograms\\\\workspace\\\\VOR\\\\src\\\\Images\\\\arrow.png"));
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
       }
		
        @Override
        public Dimension getPreferredSize() {
            return new Dimension(bi.getWidth(), bi.getHeight());
        } 

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.rotate(Math.toRadians(dialAngle), bi.getWidth() / 2, bi.getHeight() / 2);
            g2.drawImage(bi, 0, 0, null);
            
            Graphics2D g2d = (Graphics2D) g.create();
            Graphics2D g3d = (Graphics2D) g.create();
            
            g2d.setColor(Color.YELLOW);
            g2d.drawLine(getWidth() / 2, 0, getWidth() / 2, getHeight());
            g2d.drawLine(143, 160, 143, getHeight()/3);
            g2d.drawLine(126, 160, 126, getHeight()/3);
            g2d.drawLine(109, 160, 109, getHeight()/3);
            g2d.drawLine(92, 160, 92, getHeight()/3);
            g2d.drawLine(75, 160, 75, getHeight()/3);
        
            g2d.drawLine(178, 160, 178, getHeight()/3);
            g2d.drawLine(195, 160, 195, getHeight()/3);
            g2d.drawLine(212, 160, 212, getHeight()/3);
            g2d.drawLine(228, 160, 228, getHeight()/3);
            g2d.drawLine(245, 160, 245, getHeight()/3);
            
            g3d.setColor(Color.RED);
            g3d.drawLine(0, getHeight() / 2, getWidth(), getHeight() / 2);
            
            Graphics2D g3 = (Graphics2D) g;
            g3.rotate(Math.toRadians((deflection-5)*2), bi.getWidth(), bi.getHeight()*2);
            g3.drawImage(bi2, (bi.getWidth() / 2),  -50, 4,1000,this);
//          g3.rotate(Math.toRadians((deflection-5)*5));
//          g3.drawImage(bi2, (bi.getWidth() / 2)-4, 0, 6,1000,this);
        }
    }
}
